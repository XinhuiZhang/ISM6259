/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smaple;

import com.mysql.cj.util.StringUtils;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author zxh25
 */
public class NewJFrame extends javax.swing.JFrame implements LogIn {

    Employee e;
    room r = new room();

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TextUserID = new javax.swing.JTextField();
        BtnLogIn = new javax.swing.JButton();
        BtnCancel = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        TextPassWord = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        TextEID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("UserID:");

        jLabel2.setText("Password:");

        BtnLogIn.setText("Login");
        BtnLogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLogInActionPerformed(evt);
            }
        });

        BtnCancel.setText("Cancel");
        BtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });

        jPasswordField1.setText("jPasswordField1");
        jPasswordField1.setUI(null);

        jLabel3.setText("EID:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BtnLogIn)
                        .addGap(53, 53, 53)
                        .addComponent(BtnCancel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TextUserID)
                            .addComponent(TextPassWord, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                            .addComponent(TextEID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TextUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TextPassWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(64, 64, 64)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnLogIn)
                            .addComponent(BtnCancel)))
                    .addComponent(TextEID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int Login(String uid, char[] pass) {
        int ravel = -1;
        DBConnector.setMySQLConnection(uid, pass);
        if (DBConnector.getConnection() != null) {
            ravel = 1;
        }
        return ravel;
    }
    private void BtnLogInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLogInActionPerformed
        // Login define the role:
        String uid = TextUserID.getText();
        char[] pass = TextPassWord.getPassword();
        String eid = TextEID.getText();
        int code = Login(uid, pass);
        if (code > 0) {
            // Create room object
            r = new room();
            String sqlr = String.format("Select TimeSlots,interviewers from room where AppoinmentID is null ;");
            try {
                Statement sr = DBConnector.getConnection().createStatement();
                ResultSet rsr = sr.executeQuery(sqlr);
                while (rsr.next()) {
                    r.addSlots(rsr.getString(1), rsr.getString(2));
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }

            // to query the role and person info based on the eid and create employee object
            String sql = String.format("Select role From project WHERE eid ='%s'", eid);
            try {
                Statement s = DBConnector.getConnection().createStatement();
                ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {
                    String role = rs.getString(1);
                    MainPage mp = new MainPage();
                    this.setVisible(false);
                    //create employee object
                    if (role.equals("Interviewer")) {
                        // <editor-fold defaultstate="collapsed" desc="Get employee info from DB and create objectfor interviewer ">
                        String sql1 = String.format("Select * From employee WHERE eid ='%s'", eid);
                        try {
                            Statement s1 = DBConnector.getConnection().createStatement();
                            ResultSet rs1 = s1.executeQuery(sql1);
                            while (rs1.next()) {
                                String fn = rs1.getString(2);
                                String ln = rs1.getString(3);
                                String email = rs1.getString(4);
                                String phone = rs1.getString(5);
                                //Appintment missing!
                                ArrayList<Appointment> aps = new ArrayList<>();
                                e = new Employee(fn, ln, email, phone, role, aps, eid);
                            }

                        } catch (SQLException sqle) {
                            sqle.printStackTrace();
                        }
//                            get appointment info for Interviewer

                        String sqlAp = String.format("Select Appointment_AppointmentID From interviewerteam WHERE  Interviewer_ERID ='%s'", eid);
                        try {
                            Statement s2 = DBConnector.getConnection().createStatement();
                            ResultSet rs2 = s2.executeQuery(sqlAp);
                            String AppointmentTime = "";
                            while (rs2.next()) {
                                String apId = rs2.getString(1);
                                if (StringUtils.isNullOrEmpty(apId)) {
                                    break;
                                }

                                String sqlz = String.format("select room.TimeSlots from room where room.AppoinmentID='%s';", apId);
                                try {
                                    Statement sz = DBConnector.getConnection().createStatement();
                                    ResultSet rsz = sz.executeQuery(sqlz);
                                    while (rsz.next()) {
                                        AppointmentTime = rsz.getString(1);
                                    }
                                } catch (SQLException sqle) {
                                    sqle.printStackTrace();
                                }

                                Appointment ap = new Appointment(apId, AppointmentTime);
                                e.addAppointment(ap);
                            }
                            mp.SetEmployee(e);

                        } catch (SQLException sqle) {
                            sqle.printStackTrace();
                        }
                        mp.SetRoom(r);
                        mp.setVisible(true);

                        // </editor-fold>
// Interviewee section
                    } else {
                        // <editor-fold defaultstate="collapsed" desc="Get employee info from DB and create object for interviewee ">
                        String sql1 = String.format("Select * From employee WHERE eid ='%s'", eid);
                        try {
                            Statement s1 = DBConnector.getConnection().createStatement();
                            ResultSet rs1 = s1.executeQuery(sql1);
                            while (rs1.next()) {
                                String fn = rs1.getString(2);
                                String ln = rs1.getString(3);
                                String email = rs1.getString(4);
                                String phone = rs1.getString(5);
                                ArrayList<Appointment> aps = new ArrayList<>();
                                e = new Employee(fn, ln, email, phone, role, aps, eid);
                            }

                        } catch (SQLException sqle) {
                            sqle.printStackTrace();
                        }

                        String sqlAp = String.format("Select AppoinmentID From interviewee WHERE eeid ='%s'", eid);
                        //  Get the Appointment Info for this interviewee
                        try {
                            Statement s2 = DBConnector.getConnection().createStatement();
                            ResultSet rs2 = s2.executeQuery(sqlAp);
                            String AppointmentTime = "";
                            while (rs2.next()) {
                                String apId = rs2.getString(1);
                                if (StringUtils.isNullOrEmpty(apId)) {
                                    break;
                                }
                                String sqlz = String.format("select room.TimeSlots from room where room.AppoinmentID='%s';", apId);
                                try {
                                    Statement sz = DBConnector.getConnection().createStatement();
                                    ResultSet rsz = sz.executeQuery(sqlz);
                                    while (rsz.next()) {
                                        AppointmentTime = rsz.getString(1);
                                    }
                                } catch (SQLException sqle) {
                                    sqle.printStackTrace();
                                }
                                Appointment ap = new Appointment(apId,AppointmentTime);
                                e.addAppointment(ap);
                            }
                            mp.SetEmployee(e);

                        } catch (SQLException sqle) {
                            sqle.printStackTrace();
                        }

                    }

                    mp.SetRoom(r);
                    mp.setVisible(true);
                    break;
                }

            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Incorrect uid/password Combination. Please try again");
        }


    }//GEN-LAST:event_BtnLogInActionPerformed
    // </editor-fold> 
    private void BtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelActionPerformed
        // TODO add your handling code here:
        TextUserID.setText("");
        TextPassWord.setText("");
    }//GEN-LAST:event_BtnCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        TextUserID.setText("ISOM6259");
        TextPassWord.setText("ISOM6259");
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCancel;
    private javax.swing.JButton BtnLogIn;
    private javax.swing.JTextField TextEID;
    private javax.swing.JPasswordField TextPassWord;
    private javax.swing.JTextField TextUserID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    // End of variables declaration//GEN-END:variables
}
