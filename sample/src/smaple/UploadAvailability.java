/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smaple;

import com.mysql.cj.util.StringUtils;
import java.awt.List;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author zxh25
 */
public class UploadAvailability extends javax.swing.JFrame {

    private Employee e;

    public void SetEmployee(Employee e) {
        this.e = e;
    }
    private room r;

    public void SetRoom(room r) {
        this.r = r;
    }
    DefaultListModel<String> listModelOfAvailability = new DefaultListModel<>();

    /**
     * Creates new form UploadAvailability
     */
    public UploadAvailability() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        TextDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        BtnConfirm = new javax.swing.JButton();
        BtnCancel = new javax.swing.JButton();
        BtnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CoBoStartTime = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListOfAvailability = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        CoBoEndTime = new javax.swing.JComboBox<>();
        BtnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scheduling Application");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Availability"));

        jLabel1.setText("Date:");

        BtnConfirm.setText("Confirm");
        BtnConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnConfirmMouseClicked(evt);
            }
        });
        BtnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnConfirmActionPerformed(evt);
            }
        });

        BtnCancel.setText("Clear");
        BtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelActionPerformed(evt);
            }
        });

        BtnBack.setText("Back");
        BtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackActionPerformed(evt);
            }
        });

        jLabel2.setText("Please enter your availability (Date in format \"yyyy/mm/dd\")  ");

        CoBoStartTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:00AM", "09:30AM", "10:00AM", "10:30AM", "11:00AM", "11:30AM", "12:00PM", "12:30PM", "01:00PM", "01:30PM", "02:00PM", "02:30PM", "03:00PM", "03:30PM", "04:00PM", "04:30PM" }));
        CoBoStartTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CoBoStartTimeActionPerformed(evt);
            }
        });

        jLabel3.setText("to");

        jScrollPane1.setViewportView(ListOfAvailability);

        jLabel4.setText("Current Availability");

        CoBoEndTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:30AM", "10:00AM", "10:30AM", "11:00AM", "11:30AM", "12:00PM", "12:30PM", "01:00PM", "01:30PM", "02:00PM", "02:30PM", "03:00PM", "03:30PM", "04:00PM", "04:30PM", "05:00PM" }));

        BtnDelete.setText("Delete");
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextDate, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(CoBoStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CoBoEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(BtnCancel)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(BtnConfirm)
                .addGap(40, 40, 40)
                .addComponent(BtnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnBack)
                .addGap(120, 120, 120))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel2)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TextDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CoBoStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(BtnCancel)
                    .addComponent(CoBoEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnConfirm)
                    .addComponent(BtnBack)
                    .addComponent(BtnDelete))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CoBoStartTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CoBoStartTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CoBoStartTimeActionPerformed

    private void BtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelActionPerformed
        // TODO add your handling code here:
        TextDate.setText("");
        //TextEndTime.setText("AutoFilled");
    }//GEN-LAST:event_BtnCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        //TextEndTime.setEditable(false);
        //TextEndTime.setText("AutoFilled");

//        String sqlx = String.format("Select timeSlots from room where Interviewers like '%%%s%%';", e.getId());
//        try {
//            Statement s = DBConnector.getConnection().createStatement();
//            ResultSet rs = s.executeQuery(sqlx);
//            while (rs.next()) {
//                listModelOfAvailability.addElement(rs.getString(1));
//            }
//        } catch (SQLException sqle) {
//            sqle.printStackTrace();
//        }      
        ArrayList<String> times = r.getTimeSlotsByInterviewers(e);
        for (int i = 0; i < times.size(); i++) {
            listModelOfAvailability.addElement(times.get(i));
        }
        ListOfAvailability.setModel(listModelOfAvailability);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // 

    }//GEN-LAST:event_formWindowActivated

    private void BtnConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnConfirmMouseClicked
        // Read the startTime from comboBox and calculate endTime
        String date = TextDate.getText(); //change textDate
        if ((date.length() == 10)
                && (date.substring(4, 5).equals("/"))
                && (date.substring(7, 8).equals("/"))
                && (Integer.parseInt(date.substring(0, 4)) >= 2018)
                && (Integer.parseInt(date.substring(5, 7)) <= 12)
                && (Integer.parseInt(date.substring(8)) <= 31)) {
            if (CoBoStartTime.getSelectedIndex() >= 0 && !(TextDate.getText().equals(""))) { //changed endtime to combo box
                String startTime = (String) CoBoStartTime.getSelectedItem(); //A
                int box1 = CoBoStartTime.getSelectedIndex();
                String endTime = (String) CoBoEndTime.getSelectedItem();//B
                int box2 = CoBoEndTime.getSelectedIndex();
                if (box2 < box1) {
                    //popup error
                    JOptionPane.showConfirmDialog(this, "Please enter an end time that occurs after the start time.", "Improper End Time", JOptionPane.WARNING_MESSAGE);
                } else {
                    /*
                int hour = Integer.parseInt(startTime.substring(0, 2));
                String minute = startTime.substring(3, 5);
                if (minute.equals("30")) {
                    minute = "00";
                    hour += 1;
                    if (hour > 12) {
                        hour -= 12;
                    }
                } else {
                    minute = "30";
                }
                String endTime;
                if (hour >= 9) {
                    endTime = String.format("%d:%s AM", hour, minute);
                    if (hour == 12) {
                        endTime = String.format("%d:%s PM", hour, minute);
                    }
                } else {
                    endTime = String.format("%d:%s PM", hour, minute);
                }
                TextEndTime.setText(endTime);
                    
                     */

                    String timeSlot = String.format("%s %s-%s", TextDate.getText(), startTime, endTime);
                    int timeConfirm = JOptionPane.showConfirmDialog(this, String.format("The time slot is %s ?", timeSlot), "Confirm Time Slot", JOptionPane.YES_NO_OPTION);
                    if (timeConfirm == JOptionPane.YES_OPTION) {
                        for (int z = box1; z <= box2; z++) {
                            // <editor-fold defaultstate="collapsed" desc="UpdateTime">   
                            timeSlot = String.format("%s %s-%s", TextDate.getText(), CoBoStartTime.getItemAt(z), CoBoEndTime.getItemAt(z)); //change textDate to new tbx
                            //Search the room table and check if the time slot exist

                            ArrayList<String> TimeSlots = new ArrayList<>();
                            ArrayList<String> Interviewers = new ArrayList<>();
                            String sqlx = String.format("select timeSlots,Interviewers from room;");
                            try {
                                Statement sx = DBConnector.getConnection().createStatement();
                                ResultSet rs = sx.executeQuery(sqlx);
                                while (rs.next()) {
                                    TimeSlots.add(rs.getString(1));
                                    Interviewers.add(rs.getString(2));
                                }
                            } catch (SQLException sqle) {
                                sqle.printStackTrace();
                            }
                            if (TimeSlots.contains(timeSlot)) {
                                String[] InterviewersList = Interviewers.get(TimeSlots.indexOf(timeSlot)).split(",");
                                boolean dup = false;
                                for (int i = 0; i < InterviewersList.length; i++) {
                                    if (InterviewersList[i].equals(e.getId())) {
                                        dup = true;
                                    }
                                }
                                if (dup) {
                                    JOptionPane.showMessageDialog(this, "You already selected this time.", "Warning", JOptionPane.WARNING_MESSAGE);
                                } else {
//                                String sql = String.format("update room  set room.Interviewers='%s' where TimeSlots= '%s' ;", String.format("%s,%s", Interviewers.get(TimeSlots.indexOf(timeSlot)), e.getId()), timeSlot);
//                                try {
//                                    Statement s = DBConnector.getConnection().createStatement();
//                                    s.executeUpdate(sql);
//                                } catch (SQLException sqle) {
//                                    sqle.printStackTrace();
//                                }

                                    e.uploadAvailabilityWithOtherInterviewers(String.format("%s,%s", Interviewers.get(TimeSlots.indexOf(timeSlot)), e.getId()), timeSlot);
                                }

                            } else {

//                            String sql = String.format("insert into room values\n" + "(\"%s\",null,\"%s\");", timeSlot, e.getId());
//                            try {
//                                Statement s = DBConnector.getConnection().createStatement();
//                                s.executeUpdate(sql);
//                            } catch (SQLException sqle) {
//                                sqle.printStackTrace();
//                            }
                                e.uploadAvailabilityFirstOne(timeSlot, e);
                            }
                            listModelOfAvailability.addElement(timeSlot);
                        }
                             JOptionPane.showConfirmDialog(this, "Upload successfully", "Transaction", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);
                    }

                    // </editor-fold>  
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Fill the date and select start time", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a valid date.", "Warning", JOptionPane.WARNING_MESSAGE);
            TextDate.setText("");
            TextDate.requestFocus();
        }

    }//GEN-LAST:event_BtnConfirmMouseClicked

    private void BtnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnConfirmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnConfirmActionPerformed

    private void BtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackActionPerformed
        // TODO add your handling code here:
        MainPage mp = new MainPage();
        mp.SetEmployee(e);
        mp.SetRoom(r);
        mp.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BtnBackActionPerformed

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        // TODO add your handling code here:
        String timeSlot = ListOfAvailability.getSelectedValue();
        int index = ListOfAvailability.getSelectedIndex();
        String test = null;
        int resp = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this time?", "Delete availability", JOptionPane.YES_NO_OPTION);
        if (resp == JOptionPane.YES_OPTION) {
            String sql = String.format("select AppoinmentID from room where room.TimeSlots ='%s';", timeSlot);
            Connection cnn = DBConnector.getConnection();
            try {
                Statement s = DBConnector.getConnection().createStatement();
                ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {
                    if (StringUtils.isNullOrEmpty(rs.getString(1))) {
                        listModelOfAvailability.remove(index);
//                        String sqlx = String.format("delete from room where room.TimeSlots='%s';", timeSlot);
//                        Connection cnn1 = DBConnector.getConnection();
//                        try {
//                            Statement ss = cnn1.createStatement();
//                            cnn1.setAutoCommit(false);
//                            ss.executeUpdate(sqlx);
//                            cnn1.commit();
//
//                        } catch (SQLException sqle) {
//                            try {
//                                cnn1.rollback();
//                            } catch (SQLException ex) {
//                                Logger.getLogger(ChooseInterviewTime.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            sqle.printStackTrace();
//                        }
                        r.deleteTimeSlots(timeSlot);
                    } else {
                        JOptionPane.showMessageDialog(this, "An appointment exists on this timeslot. Please cancel that appointment first.", "Delete Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        /*
        String ApID="";
        int resp = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this time?", "Delete availability", JOptionPane.YES_NO_OPTION);
        if (resp == JOptionPane.YES_OPTION) {
            String sql = String.format("select AppoinmentID from room where room.TimeSlots='s';", timeSlot);
            Connection cnn = DBConnector.getConnection();
            try {                
                cnn.setAutoCommit(false);
                Statement s = DBConnector.getConnection().createStatement();
                ResultSet rs = s.executeQuery(sql);
                while (rs.next()) {
                        ApID = rs.getString(1);                    
                }

                cnn.commit();
                String[] sqlx = new String[4];
                sqlx[0] = String.format("delete from room where room.TimeSlots='%s';", timeSlot);
                sqlx[1] = String.format("delete from interviewerteam where interviewerteam.Appointment_AppointmentID ='%s';", ApID);
                sqlx[2] = String.format("update interviewee set AppoinmentID=null where AppoinmentID='%s';", ApID);
                sqlx[3] = String.format("delete from appointment where AppointmentID='%s';", ApID);
                Connection cnn1 = DBConnector.getConnection();
                try {
                    Statement ss = cnn1.createStatement();
                    cnn.setAutoCommit(false);
                    JOptionPane.showConfirmDialog(this,String.format("ApID = %s",ApID),"APID",JOptionPane.INFORMATION_MESSAGE);
                    for (int i = 0; i < sqlx.length; i++) {
                        ss.executeUpdate(sqlx[i]);
                    }
                    cnn1.commit();
                    e.deleteAppointment(ApID);
                    listModelOfAvailability.remove(index);
                } catch (SQLException sqle) {
                    try {
                        cnn.rollback();
                    } catch (SQLException ex) {
                        Logger.getLogger(ChooseInterviewTime.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    sqle.printStackTrace();
                }
            } catch (SQLException sqle) {
                try {
                    cnn.rollback();
                } catch (SQLException ex) {
                    Logger.getLogger(ChooseInterviewTime.class.getName()).log(Level.SEVERE, null, ex);
                }
                sqle.printStackTrace();
            }
        }
         */
    }//GEN-LAST:event_BtnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadAvailability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadAvailability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadAvailability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadAvailability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UploadAvailability().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBack;
    private javax.swing.JButton BtnCancel;
    private javax.swing.JButton BtnConfirm;
    private javax.swing.JButton BtnDelete;
    private javax.swing.JComboBox<String> CoBoEndTime;
    private javax.swing.JComboBox<String> CoBoStartTime;
    private javax.swing.JList<String> ListOfAvailability;
    private javax.swing.JTextField TextDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
